*** a/lib/cximage-6.0/CxImage/ximadsp.cpp	2015-07-13 21:07:01.000000000 +0200
--- b/lib/cximage-6.0/CxImage/ximadsp.cpp	2017-11-11 15:41:49.142294574 +0100
***************
*** 3,8 ****
--- 3,10 ----
   * CxImage version 6.0.0 02/Feb/2008
   */
  
+ #include <queue>
+ 
  #include "ximage.h"
  
  #include "ximaiter.h"
***************
*** 3476,3482 ****
  }
  
  ////////////////////////////////////////////////////////////////////////////////
! #include <queue>
  ////////////////////////////////////////////////////////////////////////////////
  /**
   * Flood Fill
--- 3478,3484 ----
  }
  
  ////////////////////////////////////////////////////////////////////////////////
! //#include <queue>
  ////////////////////////////////////////////////////////////////////////////////
  /**
   * Flood Fill
***************
*** 3490,3497 ****
   * \return true if everything is ok
   */
  #if defined(XBMC) && !defined(_WIN32)
! int max(int a, int b) { return a > b ? a : b; }
! int min(int a, int b) { return a < b ? a : b; }
  #endif
  
  bool CxImage::FloodFill(const long xStart, const long yStart, const RGBQUAD cFillColor, const BYTE nTolerance,
--- 3492,3499 ----
   * \return true if everything is ok
   */
  #if defined(XBMC) && !defined(_WIN32)
! int xbmc_max(int a, int b) { return a > b ? a : b; }
! int xbmc_min(int a, int b) { return a < b ? a : b; }
  #endif
  
  bool CxImage::FloodFill(const long xStart, const long yStart, const RGBQUAD cFillColor, const BYTE nTolerance,
***************
*** 3537,3544 ****
  	if (IsIndexed()){ //--- Generic indexed image, no tolerance OR Grayscale image with tolerance
  		BYTE idxRef = GetPixelIndex(xStart,yStart);
  		BYTE idxFill = GetNearestIndex(cFillColor);
! 		BYTE idxMin = (BYTE)min(255, max(0,(int)(idxRef - nTolerance)));
! 		BYTE idxMax = (BYTE)min(255, max(0,(int)(idxRef + nTolerance)));
  
  		while(!q.empty())
  		{
--- 3539,3546 ----
  	if (IsIndexed()){ //--- Generic indexed image, no tolerance OR Grayscale image with tolerance
  		BYTE idxRef = GetPixelIndex(xStart,yStart);
  		BYTE idxFill = GetNearestIndex(cFillColor);
! 		BYTE idxMin = (BYTE)xbmc_min(255, xbmc_max(0,(int)(idxRef - nTolerance)));
! 		BYTE idxMax = (BYTE)xbmc_min(255, xbmc_max(0,(int)(idxRef + nTolerance)));
  
  		while(!q.empty())
  		{
***************
*** 3574,3585 ****
  	} else { //--- RGB image
  		RGBQUAD cRef = GetPixelColor(xStart,yStart);
  		RGBQUAD cRefMin, cRefMax;
! 		cRefMin.rgbRed   = (BYTE)min(255, max(0,(int)(cRef.rgbRed   - nTolerance)));
! 		cRefMin.rgbGreen = (BYTE)min(255, max(0,(int)(cRef.rgbGreen - nTolerance)));
! 		cRefMin.rgbBlue  = (BYTE)min(255, max(0,(int)(cRef.rgbBlue  - nTolerance)));
! 		cRefMax.rgbRed   = (BYTE)min(255, max(0,(int)(cRef.rgbRed   + nTolerance)));
! 		cRefMax.rgbGreen = (BYTE)min(255, max(0,(int)(cRef.rgbGreen + nTolerance)));
! 		cRefMax.rgbBlue  = (BYTE)min(255, max(0,(int)(cRef.rgbBlue  + nTolerance)));
  
  		while(!q.empty())
  		{
--- 3576,3587 ----
  	} else { //--- RGB image
  		RGBQUAD cRef = GetPixelColor(xStart,yStart);
  		RGBQUAD cRefMin, cRefMax;
! 		cRefMin.rgbRed   = (BYTE)xbmc_min(255, xbmc_max(0,(int)(cRef.rgbRed   - nTolerance)));
! 		cRefMin.rgbGreen = (BYTE)xbmc_min(255, xbmc_max(0,(int)(cRef.rgbGreen - nTolerance)));
! 		cRefMin.rgbBlue  = (BYTE)xbmc_min(255, xbmc_max(0,(int)(cRef.rgbBlue  - nTolerance)));
! 		cRefMax.rgbRed   = (BYTE)xbmc_min(255, xbmc_max(0,(int)(cRef.rgbRed   + nTolerance)));
! 		cRefMax.rgbGreen = (BYTE)xbmc_min(255, xbmc_max(0,(int)(cRef.rgbGreen + nTolerance)));
! 		cRefMax.rgbBlue  = (BYTE)xbmc_min(255, xbmc_max(0,(int)(cRef.rgbBlue  + nTolerance)));
  
  		while(!q.empty())
  		{
diff -rc a/lib/libsidplay2/libsidplay/src/xsid/xsid.cpp b/lib/libsidplay2/libsidplay/src/xsid/xsid.cpp
*** a/lib/libsidplay2/libsidplay/src/xsid/xsid.cpp	2015-07-13 21:07:01.000000000 +0200
--- b/lib/libsidplay2/libsidplay/src/xsid/xsid.cpp	2017-11-11 15:49:16.301394295 +0100
***************
*** 94,100 ****
      '\x08', '\x19', '\x2a', '\x3b', '\x4c', '\x5d', '\x6e', '\x7f'
  };
  */
! const int8_t XSID::sampleConvertTable[16] =
  {
      '\x80', '\x94', '\xa9', '\xbc', '\xce', '\xe1', '\xf2', '\x03',
      '\x1b', '\x2a', '\x3b', '\x49', '\x58', '\x66', '\x73', '\x7f'
--- 94,100 ----
      '\x08', '\x19', '\x2a', '\x3b', '\x4c', '\x5d', '\x6e', '\x7f'
  };
  */
! const char XSID::sampleConvertTable[16] =
  {
      '\x80', '\x94', '\xa9', '\xbc', '\xce', '\xe1', '\xf2', '\x03',
      '\x1b', '\x2a', '\x3b', '\x49', '\x58', '\x66', '\x73', '\x7f'
diff -rc a/lib/libsidplay2/libsidplay/src/xsid/xsid.h b/lib/libsidplay2/libsidplay/src/xsid/xsid.h
*** a/lib/libsidplay2/libsidplay/src/xsid/xsid.h	2015-07-13 21:07:01.000000000 +0200
--- b/lib/libsidplay2/libsidplay/src/xsid/xsid.h	2017-11-11 15:50:31.577624457 +0100
***************
*** 238,244 ****
      uint8_t             sidData0x18;
      bool                _sidSamples;
      int8_t              sampleOffset;
!     static const int8_t sampleConvertTable[16];
      bool                wasRunning;
  
  private:
--- 238,244 ----
      uint8_t             sidData0x18;
      bool                _sidSamples;
      int8_t              sampleOffset;
!     static const char sampleConvertTable[16];
      bool                wasRunning;
  
  private:
*** a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp	2015-07-13 21:07:01.000000000 +0200
--- b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp	2017-11-11 15:25:14.720701017 +0100
***************
*** 47,53 ****
  bool CEGLNativeTypeIMX::CheckCompatibility()
  {
    std::ifstream file("/sys/class/graphics/fb0/fsl_disp_dev_property");
!   return file;
  }
  
  void CEGLNativeTypeIMX::Initialize()
--- 47,53 ----
  bool CEGLNativeTypeIMX::CheckCompatibility()
  {
    std::ifstream file("/sys/class/graphics/fb0/fsl_disp_dev_property");
!   return !file.fail();
  }
  
  void CEGLNativeTypeIMX::Initialize()
